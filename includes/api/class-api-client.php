<?php
require 'vendor/autoload.php';
class Avangpress_API_Client {

	/**
	 * @var array
	 */
	private $public_key;

	/**
	 * @var string
	 */
	private $api_url = 'https://avangpress.net/api/';

	/**
	 * @var array
	 */
	private $last_response;

	/**
	 * @var array
	 */
	private $last_request;

	/**
	 * Constructor
	 *
	 * @param array config public_key,private key
	 */
	public function __construct($opts) {
		AvangEmailApi_Autoloader::register();

		$public = isset($opts['public_key']) ? $opts['public_key'] : '';
		$private = isset($opts['public_key']) ? $opts['public_key'] : '';

		if (empty($public) || empty($private)) {
			return false;
		}

		$config = new AvangEmailApi_Config(array(
			'publicKey' => $public,
			'privateKey' => $private,
			// change the filesPath to point the correct yii cache components which available in the vendor directory
			'components' => array(
				'cache' => array(
					'class' => 'AvangEmailApi_Cache_File',
					'filesPath' => dirname(__FILE__) . '/vendor/avangdev/avang-php/AvangPressApi/Cache/data/cache',
				),
			),
		));
		AvangEmailApi_Base::setConfig($config);
		date_default_timezone_set('UTC');

	}

	/**
	 * @param string $resource
	 * @param array $args
	 *
	 * @return mixed
	 * @throws Avangpress_API_Exception
	 */
	public function get($req, array $args = array()) {

		switch ($req) {
		case 'lists':
			$endpoint = new AvangEmailApi_Endpoint_Lists();
			return $endpoint->getLists(1, 20);
			break;
		case 'list':
			$endpoint = new AvangEmailApi_Endpoint_Lists();
			return $endpoint->getList($args['list_id']);
			break;
		case 'emailinlist':
			$endpoint = new AvangEmailApi_Endpoint_ListSubscribers();
			return $endpoint->emailSearch($args['list_id'], $args['email_address']);

			break;
		}
	}

	/**
	 * @param string $resource
	 * @param array $data
	 *
	 * @return mixed
	 * @throws Avangpress_API_Exception
	 */
	public function post($resource, array $data) {
		return $this->request('POST', $resource, $data);
	}

	/**
	 * @param string $resource
	 * @param array $data
	 * @return mixed
	 * @throws Avangpress_API_Exception
	 */
	public function put($req, array $args = array()) {
		switch ($req) {
		case 'member':
			$endpoint = new AvangEmailApi_Endpoint_ListSubscribers();
			return $endpoint->create($args['list_id'], array('EMAIL' => $args['email_address']));
			break;
		}
	}

	/**
	 * @param string $resource
	 * @param array $data
	 * @return mixed
	 * @throws Avangpress_API_Exception
	 */
	public function patch($list_id, $email_address) {
		$endpoint = new AvangEmailApi_Endpoint_ListSubscribers();
		$response = $endpoint->createUpdate($list_id, array(
			'EMAIL' => $email_address,
		));
	}

	/**
	 * @param string $resource
	 * @return mixed
	 * @throws Avangemail_API_Exception
	 */
	public function delete($req, $args) {
		switch ($req) {
		case 'member':
			$endpoint = new AvangEmailApi_Endpoint_ListSubscribers();
			return $endpoint->deleteByEmail($args['list_id'], $args['email_address']);
			break;
		}
	}

	/**
	 * @param string $method
	 * @param string $resource
	 * @param array $data
	 *
	 * @return mixed
	 *
	 * @throws Avangemail_API_Exception
	 */
	private function request($method, $resource, array $data = array()) {
		$this->reset();

		// don't bother if no API key was given.
		if (empty($this->public_key)) {
			throw new Avangemail_API_Exception("Missing API key", 001);
		}

		$url = $this->api_url . ltrim($resource, '/');
		$args = array(
			'url' => $url,
			'method' => $method,
			'headers' => $this->get_headers(),
			'timeout' => 10,
			'sslverify' => apply_filters('avangpress_use_sslverify', true),
		);

		if (!empty($data)) {
			if (in_array($method, array('GET', 'DELETE'))) {
				$url = add_query_arg($data, $url);
			} else {
				$args['body'] = json_encode($data);
			}
		}

		/**
		 * Filter the request arguments for all requests generated by this class
		 *
		 * @param array $args
		 */
		$args = apply_filters('avangpress_http_request_args', $args, $url);

		// perform request
		$response = wp_remote_request($url, $args);

		// store request & response
		$this->last_request = $args;
		$this->last_response = $response;

		// parse response
		return $this->parse_response($response);

	}

	/**
	 * @return array
	 */
	private function get_headers() {
		global $wp_version;

		$headers = array();
		$headers['X-MW-PUBLIC-KEY'] = $this->public_key;
		$headers['X-MW-TIMESTAMP'] = time();
		$headers['X-MW-REMOTE-ADDR'] = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';
		$headers['Accept'] = 'application/json';
		$headers['Content-Type'] = 'application/json';
		$headers['User-Agent'] = 'AvangPress4wp/' . Avangpress_VERSION . '; WordPress/' . $wp_version . '; ' . get_bloginfo('url');

		return $headers;
	}

	/**
	 * @param array|WP_Error $response
	 *
	 * @return mixed
	 *
	 * @throws Avangpress_API_Exception
	 */
	private function parse_response($response) {

		if ($response instanceof WP_Error) {
			throw new Avangemail_API_Connection_Exception($response->get_error_message(), (int) $response->get_error_code());
		}

		// decode response body
		$code = (int) wp_remote_retrieve_response_code($response);
		$message = wp_remote_retrieve_response_message($response);
		$body = wp_remote_retrieve_body($response);

		// set body to "true" in case AvangPress returned No Content
		if ($code < 300 && empty($body)) {
			$body = "true";
		}

		$data = json_decode($body);
		if ($code >= 400) {
			// check for akamai errors
			// {"type":"akamai_error_message","title":"akamai_503","status":503,"ref_no":"Reference Number: 00.950e16c3.1498559813.1450dbe2"}
			if (is_object($data) && isset($data->type) && $data->type === 'akamai_error_message') {
				throw new Avangemail_API_Connection_Exception($message, $code, $this->last_request, $this->last_response, $data);
			}

			if ($code === 404) {
				throw new Avangemail_API_Resource_Not_Found_Exception($message, $code, $this->last_request, $this->last_response, $data);
			}

			// mail returned an error..
			throw new Avangemail_API_Exception($message, $code, $this->last_request, $this->last_response, $data);
		}

		if (!is_null($data)) {
			return $data;
		}

		// unable to decode response
		throw new Avangemail_API_Exception($message, $code, $this->last_request, $this->last_response);
	}

	/**
	 * Empties all data from previous response
	 */
	private function reset() {
		$this->last_response = null;
		$this->last_request = null;
	}

	/**
	 * @return string
	 */
	public function get_last_response_body() {
		return wp_remote_retrieve_body($this->last_response);
	}

	/**
	 * @return array
	 */
	public function get_last_response_headers() {
		return wp_remote_retrieve_headers($this->last_response);
	}

	/**
	 * @return array|WP_Error
	 */
	public function get_last_response() {
		return $this->last_response;
	}

}
